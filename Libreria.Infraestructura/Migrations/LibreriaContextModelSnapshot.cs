// <auto-generated />
using System;
using Libreria.Infraestructura.AccesoDatos.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Libreria.Infraestructura.Migrations
{
    [DbContext(typeof(LibreriaContext))]
    partial class LibreriaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Agency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Agencies");
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Shipment", b =>
                {
                    b.Property<int>("TrackNbr")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TrackNbr"));

                    b.Property<int>("CurrentStatus")
                        .HasColumnType("int");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("ShipmentType")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("TrackNbr");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Shipments");

                    b.HasDiscriminator<string>("ShipmentType").HasValue("Shipment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Tracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("TrackNbr")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TrackNbr");

                    b.ToTable("Trackings");
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Common", b =>
                {
                    b.HasBaseType("Libreria.LogicaDeNegocio.Entities.Shipment");

                    b.Property<int?>("PickupAgency")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Common");
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Urgent", b =>
                {
                    b.HasBaseType("Libreria.LogicaDeNegocio.Entities.Shipment");

                    b.Property<string>("PostalAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Urgent");
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Client", b =>
                {
                    b.HasBaseType("Libreria.LogicaNegocio.Entities.User");

                    b.HasDiscriminator().HasValue("Client");
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Employee", b =>
                {
                    b.HasBaseType("Libreria.LogicaNegocio.Entities.User");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Admin", b =>
                {
                    b.HasBaseType("Libreria.LogicaDeNegocio.Entities.Employee");

                    b.HasDiscriminator().HasValue("Admin");
                });

            modelBuilder.Entity("Worker", b =>
                {
                    b.HasBaseType("Libreria.LogicaDeNegocio.Entities.Employee");

                    b.HasDiscriminator().HasValue("Worker");
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Agency", b =>
                {
                    b.HasOne("Libreria.LogicaDeNegocio.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsOne("Libreria.LogicaNegocio.Vo.Name", "Name", b1 =>
                        {
                            b1.Property<int>("AgencyId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("AgencyId");

                            b1.ToTable("Agencies");

                            b1.WithOwner()
                                .HasForeignKey("AgencyId");
                        });

                    b.OwnsOne("Libreria.LogicaDeNegocio.Vo.Ubication", "Ubication", b1 =>
                        {
                            b1.Property<int>("AgencyId")
                                .HasColumnType("int");

                            b1.Property<float?>("Latitude")
                                .HasColumnType("real")
                                .HasColumnName("Latitude");

                            b1.Property<float?>("Longitude")
                                .HasColumnType("real")
                                .HasColumnName("Longitude");

                            b1.Property<string>("PostalAddress")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PostalAddress");

                            b1.HasKey("AgencyId");

                            b1.ToTable("Agencies");

                            b1.WithOwner()
                                .HasForeignKey("AgencyId");
                        });

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Ubication")
                        .IsRequired();
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Shipment", b =>
                {
                    b.HasOne("Libreria.LogicaDeNegocio.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Libreria.LogicaNegocio.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Tracking", b =>
                {
                    b.HasOne("Libreria.LogicaDeNegocio.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Libreria.LogicaDeNegocio.Entities.Shipment", null)
                        .WithMany("Trackings")
                        .HasForeignKey("TrackNbr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Libreria.LogicaNegocio.Entities.User", b =>
                {
                    b.OwnsOne("Libreria.LogicaNegocio.Vo.Name", "Name", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Libreria.LogicaNegocio.Vo.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Email");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Libreria.LogicaNegocio.Vo.LastName", "LastName", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Password", "Password", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(256)
                                .HasColumnType("nvarchar(256)")
                                .HasColumnName("Password");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("LastName")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("Libreria.LogicaDeNegocio.Entities.Shipment", b =>
                {
                    b.Navigation("Trackings");
                });
#pragma warning restore 612, 618
        }
    }
}
